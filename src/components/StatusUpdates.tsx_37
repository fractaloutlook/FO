import React, { useState, useEffect, useRef } from 'react';
import { AlertCircle } from 'lucide-react';
import * as STDB from '@clockworklabs/spacetimedb-sdk';

const StatusUpdates = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [statusMessage, setStatusMessage] = useState('Initializing connection...');
  const [currentStatus, setCurrentStatus] = useState(null);
  const [updates, setUpdates] = useState([]);
  const [isAdmin, setIsAdmin] = useState(false);
  const connectionRef = useRef(null);
  const initialized = useRef(false);

  useEffect(() => {
    if (!initialized.current) {
      initialized.current = true;
      connectToSpacetimeDB();
    }

    // Cleanup function to disconnect when component unmounts
    return () => {
      if (connectionRef.current && connectionRef.current.isActive) {
        console.log('Disconnecting from SpacetimeDB');
        connectionRef.current.disconnect();
      }
    };
  }, []);

  const connectToSpacetimeDB = async () => {
    try {
      console.log('Initializing SpacetimeDB connection...');
      setStatusMessage('Connecting to SpacetimeDB...');

      // Get the saved auth token if it exists
      const savedToken = localStorage.getItem('auth_token');
      console.log('Saved token available:', !!savedToken);

      // Create a connection using the DBConnection builder
      const connection = new window.DBConnectionBuilder()
        .withUri('ws://localhost:3000')
        .withModuleName('status-module')
        .onConnect((conn, identity, token) => {
          console.log('Connected to SpacetimeDB');
          console.log('Identity:', identity?.toHexString());
          
          // Save the connection and token
          connectionRef.current = conn;
          localStorage.setItem('auth_token', token);
          
          // Update UI state
          setIsConnected(true);
          setStatusMessage('Connected to SpacetimeDB');
          
          // Create a subscription to the database tables
          setupSubscription(conn, identity);
        })
        .onConnectError((_, error) => {
          console.error('Connection error:', error);
          setStatusMessage(`Connection error: ${error.message}`);
        })
        .onDisconnect(() => {
          console.log('Disconnected from SpacetimeDB');
          connectionRef.current = null;
          setIsConnected(false);
          setStatusMessage('Disconnected from SpacetimeDB');
        })
        .build();

      // Setup event handlers for table updates
      setupEventHandlers(connection);

    } catch (error) {
      console.error('Failed to initialize connection:', error);
      setStatusMessage(`Connection initialization failed: ${error.message}`);
    }
  };

  const setupSubscription = (conn, identity) => {
    conn.subscriptionBuilder()
      .onApplied((ctx) => {
        console.log('Subscription applied');
        
        // Check if user is admin
        const adminTable = conn.db.admin;
        const adminStatus = adminTable.identity.find(identity);
        
        console.log('Admin check:', {
          isAdmin: !!adminStatus,
          adminCount: adminTable.count(),
          identityHex: identity?.toHexString()
        });
        
        setIsAdmin(!!adminStatus);
        
        // Get current status
        const statusTable = conn.db.currentStatus;
        const status = statusTable.id.find(0);
        
        if (status) {
          setCurrentStatus({
            id: status.id,
            message: status.message,
            lastUpdated: status.lastUpdated
          });
        }
        
        // Get update logs
        const updateLogs = Array.from(conn.db.updateLog.iter())
          .map(update => ({
            updateId: update.updateId,
            message: update.message,
            timestamp: update.timestamp
          }))
          .sort((a, b) => Number(b.timestamp - a.timestamp));
        
        setUpdates(updateLogs);
      })
      .subscribe(['SELECT * FROM current_status', 'SELECT * FROM admin', 'SELECT * FROM update_log']);
  };

  const setupEventHandlers = (connection) => {
    // Watch for status updates
    connection.db.currentStatus.onUpdate((ctx, _, newStatus) => {
      console.log('Status update received:', newStatus);
      setCurrentStatus({
        id: newStatus.id,
        message: newStatus.message,
        lastUpdated: newStatus.lastUpdated
      });
    });

    // Watch for new updates
    connection.db.updateLog.onInsert((ctx, newUpdate) => {
      console.log('New update received:', newUpdate);
      setUpdates(prev => [
        {
          updateId: newUpdate.updateId,
          message: newUpdate.message,
          timestamp: newUpdate.timestamp
        },
        ...prev
      ]);
    });
  };

  return (
    <div className="space-y-4 mt-8">
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-2">
          <AlertCircle size={18} className="text-blue-500" />
          <h3 className="font-medium text-gray-900">Connection Status</h3>
        </div>
        <p className="text-gray-700">{statusMessage}</p>
        {isAdmin && (
          <p className="text-sm text-green-600 mt-2 font-medium">üîê Admin access enabled</p>
        )}
      </div>

      {currentStatus && (
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h4 className="font-medium text-gray-900 mb-2">Current Status:</h4>
          <p className="text-gray-800">{currentStatus.message}</p>
          <p className="text-sm text-gray-600 mt-1">
            Last updated: {new Date(Number(currentStatus.lastUpdated) / 1000).toLocaleString()}
          </p>
        </div>
      )}

      {updates.length > 0 && (
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h4 className="font-medium text-gray-900 mb-4">Recent Updates:</h4>
          <div className="space-y-3">
            {updates.map(update => (
              <div
                key={update.updateId.toString()}
                className="p-3 bg-gray-50 rounded-lg border border-gray-200"
              >
                <p className="text-gray-800">{update.message}</p>
                <p className="text-sm text-gray-500 mt-1">
                  {new Date(Number(update.timestamp) / 1000).toLocaleString()}
                </p>
              </div>
            ))}
          </div>
        </div>
      )}

      {isAdmin && connectionRef.current && (
        <AdminControls connection={connectionRef.current} />
      )}

      <div className="text-xs text-gray-500">
        Admin: {isAdmin ? 'Yes' : 'No'} | Connection: {connectionRef.current ? 'Active' : 'None'}
      </div>
    </div>
  );
};

export default StatusUpdates;