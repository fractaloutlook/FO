import React, { useState, useEffect } from 'react';
import { AlertCircle } from 'lucide-react';
import * as STDB from '@clockworklabs/spacetimedb-sdk';
import { DBConnection } from '../module_bindings';
import { Identity } from '@clockworklabs/spacetimedb-sdk';

const StatusUpdates = () => {
  const [connectionStatus, setConnectionStatus] = useState('Initializing...');
  const [statusMessage, setStatusMessage] = useState('');

  const [newName, setNewName] = useState("Initializing...");
  const [settingName, setSettingName] = useState(false);
  const [systemMessage, setSystemMessage] = useState("");
  const [newMessage, setNewMessage] = useState("");
  const [connected, setConnected] = useState<boolean>(false);
  const [identity, setIdentity] = useState<Identity | null>(null);
  const [conn, setConn] = useState<DBConnection | null>(null);
  /* ===========================================
   * ATTEMPT #2 - Basic DBConnectionBuilder
   * =========================================== */
  /*
  useEffect(() => {
    const connectToDatabase = async () => {
      try {
        console.log('Starting connection attempt #2');
        console.log('DBConnectionBuilder available:', !!STDB.DBConnectionBuilder);
        
        const builder = new STDB.DBConnectionBuilder();
        console.log('Builder created:', builder);
        
        const connection = builder
          .withUri('wss://testnet.spacetimedb.com')
          .withModuleName('status-module')
          .build();
          
        console.log('Connection built:', connection);

      } catch (error) {
        console.error('Failed to initialize:', error);
        setConnectionStatus(`Error: ${error.message}`);
      }
    };

    connectToDatabase();
  }, []);
  */

  /* ===========================================
   * ATTEMPT #3 - With Module Configuration
   * =========================================== */
  /*
  useEffect(() => {
    const connectToDatabase = async () => {
      try {
        console.log('Starting connection attempt #3');
        
        // Simple module configuration
        const moduleConfig = {
          tables: {},
          reducers: {},
          eventContextConstructor: (imp, event) => ({ ...imp, event }),
          dbViewConstructor: (conn) => ({}),
          reducersConstructor: (conn) => ({})
        };

        // Create builder with required params
        const builder = new STDB.DBConnectionBuilder(
          moduleConfig,
          imp => imp  // Identity function for dbConnectionConstructor
        );
        console.log('Builder created:', builder);
        
        // Build with the info parameter the interface shows
        const connection = builder
          .withUri('wss://testnet.spacetimedb.com')
          .withModuleName('status-module')
          .build();
          
        console.log('Connection built:', connection);

      } catch (error) {
        console.error('Failed to initialize:', error);
        setConnectionStatus(`Error: ${error.message}`);
      }
    };

    connectToDatabase();
  }, []);

  return (
    <div className="space-y-4 mt-8">
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-2">
          <AlertCircle size={18} className="text-blue-500" />
          <h3 className="font-medium text-gray-900">Status:</h3>
        </div>
        <p className="text-gray-700">
          {connectionStatus}
          {statusMessage && (
            <span className="block mt-2">
              Message: {statusMessage}
            </span>
          )}
        </p>
      </div>
    </div>
  );
};

*/

const StatusUpdates = () => {
  const [connectionStatus, setConnectionStatus] = useState('Initializing...');
  const [statusMessage, setStatusMessage] = useState('');
  const [conn, setConn] = useState(null);

  useEffect(() => {
    console.log('Connecting to SpacetimeDB...');
    
    setConn(DBConnection.builder()
      .withUri('http://localhost:3000')  // Changed to http for initial connection
      .withModuleName('status-module')
      .onConnect((conn, identity, token) => {
        console.log('Connected!', { identity: identity.toHexString(), token });
        setConnectionStatus('Connected');
        localStorage.setItem('auth_token', token);
        
        conn.subscriptionBuilder()
          .onApplied(() => {
            console.log("SDK client cache initialized.");
            setStatusMessage("Client cache initialized");
          })
          .subscribe(['SELECT * FROM current_status']);
      })
      .onDisconnect(() => {
        console.log("Disconnected from SpacetimeDB");
        setConnectionStatus('Disconnected');
      })
      .onConnectError((_, err) => {
        console.error("Connection error:", err);
        setConnectionStatus(`Connection error: ${err.message}`);
      })
      .build()
    );

    return () => {
      if (conn) {
        conn.disconnect();
      }
    };
  }, []);

  return (
    <div className="space-y-4 mt-8">
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-2">
          <AlertCircle size={18} className="text-blue-500" />
          <h3 className="font-medium text-gray-900">Status:</h3>
        </div>
        <p className="text-gray-700">
          {connectionStatus}
          {statusMessage && (
            <span className="block mt-2">
              Message: {statusMessage}
            </span>
          )}
        </p>
      </div>
    </div>
  );
};

export default StatusUpdates;