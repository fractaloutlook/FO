import React, { useState, useEffect, useRef } from 'react';
import { AlertCircle } from 'lucide-react';
import { AdminTableHandle, DBConnection } from '../module_bindings';
import AdminControls from './AdminControls';
import { safeJsonStringify, generateUniqueId, bigIntToDate } from '../utils/bigint-utils';

const StatusUpdates = () => {
  // define state variables
  const [isConnected, setIsConnected] = useState(false);
  const [statusMessage, setStatusMessage] = useState('Connecting...');
  const [currentStatus, setCurrentStatus] = useState(null);
  const [updates, setUpdates] = useState([]);
  const [isAdmin, setIsAdmin] = useState(false);
  const [connection, setConnection] = useState(null);
  const initialized = useRef(false); 

  // Debug method for admin table
  React.useEffect(() => {
    window.debugAdmin = () => {
      if (!connection) {
        console.log('No connection available');
        return;
      }
      
      const adminTableEntries = Array.from(connection.db.admin.iter());
      const identity = connection.identity;
      
      try {
        console.log('Admin Debug:', {
          connection: !!connection,
          identity: identity?.toHexString?.(),
          adminCount: connection.db.admin.count(),
          adminEntries: adminTableEntries.map(a => ({
            identityHex: a.identity?.toHexString?.(),
            isMatch: a.identity?.toHexString?.() === identity?.toHexString?.()
          }))
        });
      } catch (error) {
        console.log('Error in debugAdmin:', error);
      }
    };
    
    return () => {
      delete window.debugAdmin;
    };
  }, [connection]);

  useEffect(() => {
    if (!initialized.current) {
      initialized.current = true;
      const initializeConnection = async () => {
      try {
        const savedToken = localStorage.getItem('auth_token');
        console.log('Raw saved token:', savedToken);
        
        const isValidToken = (token) => token && typeof token === 'string' && token.length > 20;

        console.log('Using saved token:', savedToken);   
        const conn = await DBConnection.builder()
          .withUri('ws://localhost:3000')
          .withModuleName('status-module')
          .withCredentials([null, isValidToken(savedToken) ? savedToken : null])
          .onConnect((connectedConn, identity, token) => {
            console.log('Connected with connection object 1:', connectedConn);
            
            setConnection(connectedConn);
            localStorage.setItem('auth_token', token);
            setIsConnected(true);
            setStatusMessage('Connected 1');
            
            try {
              console.log('New connection details:', {
                token,
                identityHex: identity?.toHexString()
              });
            } catch (error) {
              console.log('Error logging identity details:', error);
            }
  
            connectedConn.subscriptionBuilder()
            .onApplied((ctx) => {
              console.log('Subscription applied --------------------------------');
              console.log('onConnect subscription applied');

              // Reload admin status explicitly on subscription applied
              const identity = connectedConn.identity;
              const adminTableEntries = Array.from(conn.db.admin.iter());
              
              try {
                const identityHex = identity?.toHexString?.();
                
                // Log all available information for debugging
                console.log('Revalidating admin on subscription:', {
                  identityHex,
                  adminCount: connectedConn.db.admin.count(),
                  adminEntries: adminTableEntries.map(a => a.identity?.toHexString?.())
                });
                
                // Try both methods
                const adminStatus = connectedConn.db.admin?.identity?.find ? 
                     connectedConn.db.admin.identity.find(identity) : undefined;
                const manualMatch = adminTableEntries.some(admin => 
                      admin.identity && identity && 
                      admin.identity?.toHexString?.() === identityHex);
                
                console.log('Admin match results:', { adminStatus, manualMatch });

                setIsAdmin(!!adminStatus || manualMatch);

                // Try identity comparison using the SDK's isEqual method if available
                const usingIsEqual = adminTableEntries.some(admin => 
                  admin.identity?.isEqual && identity && 
                  admin.identity.isEqual(identity));
                
                console.log('Admin match using isEqual():', usingIsEqual);
                
                if (usingIsEqual) {
                  setIsAdmin(true);
                }

                // Add known admin IDs
                const knownAdmins = [
                  '87750156875127036908901665596203429061340017254934419099381395459532602755426',
                  '87750269751448402144363327785474093733782240338747509602264477582796839799289'
                ];

                // Try to convert identity to decimal format for comparison
                const currentIdDecimal = identity ? BigInt('0x' + identity.toHexString()).toString() : 'unknown';
                const directMatch = knownAdmins.includes(currentIdDecimal);
                
                console.log('Direct identity comparison:', {
                  currentIdDecimal,
                  directMatch
                });

                // Force admin status if we get a direct match
                if (directMatch) {
                  setIsAdmin(true);
                }
              } catch (error) {
                console.log('Error during admin validation:', error);
              }

              // Override admin status for development
              console.log("OVERRIDE: Setting admin status to true for debugging");
              setIsAdmin(true);
              
              // Fetch all updates immediately at connection time
              refreshAllUpdates(connectedConn);
            })
            .subscribe([
              'SELECT * FROM admin', 
              'SELECT * FROM update_log',
              'SELECT * FROM current_status'
            ]);

            console.log("Subscribed to admin, update_log, and current_status tables");
          })
          .onConnectError((_, error) => {
            console.error('Connection error:', error);
            setStatusMessage(`Connection error: ${error.message}`);
          })
          .onDisconnect(() => {
            console.log('Disconnected, clearing connection');
            setConnection(null);
            setIsConnected(false);
            setStatusMessage('Disconnected');
          })
          .build();

          // Update the UI with the current status
          conn.db.currentStatus.onUpdate((ctx, _, newStatus) => {
            try {
              console.log('Status update received:', safeJsonStringify({
                newStatusMessage: newStatus.message,
                timestamp: newStatus.lastUpdated
              }));
              
              // Force a fresh state update
              setCurrentStatus({
                id: newStatus.id,
                message: newStatus.message,
                lastUpdated: newStatus.lastUpdated,
              });

              // Admin table debugging
              const adminCount = conn.db.admin.count();
              console.log('Admin table check:', {
                  adminCount,
                  currentIdentity: conn.identity?.toHexString?.()
              });
            } catch (error) {
              console.error('Error updating status:', error);
            }
          });

          conn.db.updateLog.onInsert((ctx, newUpdate) => {
            try {
              console.log('New update received raw:', Object.keys(newUpdate));
              
              // Log specific properties to avoid circular references
              console.log('New update details:');
              console.log('- message:', newUpdate.message);
              console.log('- timestamp:', newUpdate.timestamp);
              console.log('- updateId:', newUpdate.updateId);
              
              // Make sure all required fields exist before adding to state
              if (newUpdate) {
                // Create a clean object with just the data we need
                const formattedUpdate = {
                  message: newUpdate.message || "Unknown message",
                  timestamp: newUpdate.timestamp || Date.now() * 1000,
                  update_id: newUpdate.updateId || generateUniqueId('insert')
                };
                
                console.log('Formatted update:', formattedUpdate);
                
                // Add new update to state and re-sort
                setUpdates(prev => {
                  // Check if this update is already in the list (avoid duplicates)
                  const exists = prev.some(update => 
                    update.update_id === formattedUpdate.update_id
                  );
                  
                  if (exists) {
                    console.log('Update already exists in state, not adding again');
                    return prev;
                  }
                  
                  // Add the new update and sort
                  const newList = [formattedUpdate, ...prev]
                    .sort((a, b) => Number(b.timestamp) - Number(a.timestamp));
                    
                  console.log(`Update list now has ${newList.length} items:`);
                  newList.forEach((item, index) => {
                    console.log(`${index}: ${item.message} (${item.update_id})`);
                  });
                  
                  return newList;
                });
              } else {
                console.warn('Received empty update object');
              }
            } catch (error) {
              console.error('Error processing new update:', error);
            }
            
            // Refresh all updates to ensure we have everything
            refreshAllUpdates(conn);
          });
        
        // Teardown routine on component unmount
        return () => {
          if (conn.disconnect) {
            conn.disconnect(); // Close the connection
          }
          setCurrentStatus(null); // Reset current status
          setUpdates([]); // Clear updates
        };
      } catch (error) {
        console.error('Failed to initialize connection:', error);
        setStatusMessage(`Failed to connect: ${error.message}`);
      }
    };
    console.log('Initializing connection... right before running it');
    initializeConnection();
  }
    
  }, []);

  // Helper function to refresh all updates from the database
  const refreshAllUpdates = (conn) => {
    if (!conn || !conn.db || !conn.db.updateLog) {
      console.log('Cannot refresh: Invalid connection');
      return;
    }
    
    try {
      // Get all updates directly without any complex processing
      const dbUpdates = Array.from(conn.db.updateLog.iter());
      console.log(`Found ${dbUpdates.length} updates in database`);
      
      // Convert to simple objects
      const cleanUpdates = dbUpdates.map(update => ({
        // Try both property naming conventions just to be safe
        message: update.message || "Unknown message",
        timestamp: update.timestamp || Date.now() * 1000,
        update_id: update.updateId || update.update_id || `id-${Math.random()}`
      }));
      
      // Sort by timestamp
      cleanUpdates.sort((a, b) => Number(b.timestamp) - Number(a.timestamp));
      
      console.log(`Processed ${cleanUpdates.length} updates`);
      cleanUpdates.forEach((u, i) => console.log(`- Update ${i}: ${u.message}`));
      
      // Update state with all updates
      console.log('Setting updates state with all database updates');
      setUpdates(cleanUpdates);
    } catch (error) {
      console.error('Error in simplified refresh:', error);
    }
  };

  // helper function debugging the database directly
  const debugDatabaseDirectly = () => {
    if (!connection) {
      console.log("No connection available for debugging");
      return;
    }
    
    try {
      console.log("=============== DIRECT DATABASE DEBUG ===============");
      console.log("Starting direct database query...");
      
      // 1. Log the raw update_log table count
      console.log(`update_log table count: ${connection.db.updateLog.count()}`);
      
      // 2. Try to log raw entries without processing them
      const allRawEntries = Array.from(connection.db.updateLog.iter());
      console.log(`Raw entries found: ${allRawEntries.length}`);
      
      // 3. Log each entry's properties
      allRawEntries.forEach((entry, i) => {
        console.log(`Entry #${i}:`);
        console.log(`- updateId: ${entry.updateId}`);
        console.log(`- message: ${entry.message}`);
        console.log(`- timestamp: ${entry.timestamp}`);
        // Log all available properties
        console.log(`- All properties: ${Object.keys(entry).join(', ')}`);
      });
      
      console.log("=============== END DIRECT DEBUG ===============");
    } catch (error) {
      console.error("Error in direct database debug:", error);
    }
  };

  const debugDatabaseThoroughly = () => {
    if (!connection) {
      console.log("No connection available for debugging");
      return;
    }
    
    try {
      console.log("🔍 THOROUGH DATABASE INSPECTION 🔍");
      
      // 1. Check updateLog table directly
      console.log("## UPDATE LOG TABLE ##");
      console.log(`Count according to db.updateLog.count(): ${connection.db.updateLog.count()}`);
      
      // 2. Examine all entries with detailed property inspection
      const allEntries = Array.from(connection.db.updateLog.iter());
      console.log(`Raw entries found via iter(): ${allEntries.length}`);
      
      // 3. Show every possible property name
      console.log("## TESTING ALL POSSIBLE PROPERTY NAMES ##");
      const possibleProps = ['updateId', 'update_id', 'id', 'updateid', 
                            'message', 'text', 'content', 
                            'timestamp', 'time', 'date', 'created'];
      
      allEntries.forEach((entry, i) => {
        console.log(`\nEntry #${i} - All keys: ${Object.keys(entry).join(', ')}`);
        
        // Check every possible property name
        possibleProps.forEach(prop => {
          console.log(`${prop}: ${entry[prop] !== undefined ? entry[prop] : 'undefined'}`);
        });
        
        // Dump the entire object
        console.log("Full entry:", entry);
        
        // Try using different access methods
        try {
          if (entry.get) console.log("Via get():", entry.get('updateId'));
          if (entry.getProperty) console.log("Via getProperty():", entry.getProperty('updateId'));
        } catch (e) {
          console.log("Alternative access methods failed");
        }
      });
      
      // 4. Check if the reducer is working as expected
      console.log("\n## TRYING TO CALL ADMIN REDUCERS DIRECTLY ##");
      try {
        console.log("Available reducers:", Object.keys(connection.reducers || {}));
        // List all methods
        if (connection.reducers) {
          for (const key in connection.reducers) {
            console.log(`Reducer method: ${key}, type: ${typeof connection.reducers[key]}`);
          }
        }
      } catch (e) {
        console.log("Error inspecting reducers:", e);
      }
      
      // 5. Check current state vs database
      console.log("\n## COMPARING STATE WITH DATABASE ##");
      console.log("Current updates in React state:", updates.length);
      
      console.log("🔍 END THOROUGH INSPECTION 🔍");
      
      // Alert with summary
      alert(`Debug complete. Found ${allEntries.length} entries in database. Check console for details.`);
      
    } catch (error) {
      console.error("Error in thorough database debug:", error);
    }
  };
// Add this function to try direct SQL access
const tryDirectSqlQuery = async () => {
  if (!connection) {
    console.log("No connection available for SQL query");
    return;
  }
  
  try {
    console.log("🔍 ATTEMPTING DIRECT SQL QUERY 🔍");
    
    // Try different ways to access database 
    console.log("Available methods on connection:", Object.keys(connection));
    
    // Try accessing SQL functionality if it exists
    if (connection.sql) {
      console.log("SQL method found, attempting query...");
      const result = await connection.sql("SELECT * FROM update_log");
      console.log("SQL query result:", result);
    } else if (connection.query) {
      console.log("Query method found, attempting query...");
      const result = await connection.query("SELECT * FROM update_log");
      console.log("Query result:", result);
    } else if (connection.executeQuery) {
      console.log("ExecuteQuery method found, attempting query...");
      const result = await connection.executeQuery("SELECT * FROM update_log");
      console.log("ExecuteQuery result:", result);
    } else {
      console.log("No SQL-like query methods found on connection");
    }
    
    // Try alternative ways to get updates
    console.log("Alternative access methods:");
    
    if (connection.db && connection.db.updateLog) {
      // Test if any methods besides iter() exist
      console.log("Available methods on updateLog:", 
                 Object.getOwnPropertyNames(Object.getPrototypeOf(connection.db.updateLog)));
      
      // Try using select if it exists
      if (connection.db.updateLog.select) {
        console.log("Using select() method:");
        const selectResult = connection.db.updateLog.select();
        console.log("Select result:", selectResult);
      }
      
      // Try using getAll if it exists
      if (connection.db.updateLog.getAll) {
        console.log("Using getAll() method:");
        const getAllResult = connection.db.updateLog.getAll();
        console.log("GetAll result:", getAllResult);
      }
    }
    
    console.log("🔍 END SQL QUERY ATTEMPT 🔍");
  } catch (error) {
    console.error("Error in SQL query:", error);
  }
};

  useEffect(() => {
    console.log('Connection or admin status changed:', { 
      connection: !!connection, 
      isAdmin 
    });
  }, [connection, isAdmin]);

  // Monitor state updates for debugging
  useEffect(() => {
    console.log('🔄 UPDATE STATE CHANGED:', updates.length);
    updates.forEach((update, i) => {
      console.log(`State update #${i}:`, update.message, 'ID:', update.update_id);
    });
  }, [updates]);

  return (
    <div className="space-y-4 mt-8">
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <div className="flex items-center gap-2 mb-2">
          <AlertCircle size={18} className="text-blue-500" />
          <h3 className="font-medium text-gray-900">Connection Status</h3>
        </div>
        <p className="text-gray-700">{statusMessage}</p>
        {isAdmin && (
          <p className="text-sm text-green-600 mt-2 font-medium">🔐 Admin access enabled</p>
        )}
      </div>

      {currentStatus && (
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h4 className="font-medium text-gray-900 mb-2">Current Status:</h4>
          <p className="text-gray-800">{currentStatus.message}</p>
          <p className="text-sm text-gray-600 mt-1">
            Last updated: {bigIntToDate(currentStatus.lastUpdated).toLocaleString()}
          </p>
        </div>
      )}

      {updates.length > 0 && (
        <div className="bg-white rounded-lg border border-gray-200 p-4">
          <h4 className="font-medium text-gray-900 mb-4">Recent Updates:</h4>
          <p className="text-xs text-gray-500 mb-2">Found {updates.length} updates</p>
          <div className="space-y-3">
          {updates.map((update, index) => (
            <div
              key={`update-${update.update_id || index}`}
              className="p-3 bg-gray-50 rounded-lg border border-gray-200"
            >
              <p className="text-gray-800">{update.message || 'Unknown message'}</p>
              <p className="text-sm text-gray-500 mt-1">
                {update.timestamp 
                  ? bigIntToDate(update.timestamp).toLocaleString()
                  : 'Unknown time'}
              </p>
              <p className="text-xs text-gray-400 mt-1">ID: {update.update_id || 'unknown'}</p>
            </div>
          ))}
          </div>
        </div>
      )}

      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <h4 className="font-medium text-gray-900 mb-4">Recent Updates by hand:</h4>
        <div className="space-y-3">
          <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
            <p className="text-gray-800">Putting STDB module onto testnet</p>
            <p className="text-sm text-gray-500 mt-1">Just now</p>
          </div>

          <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
            <p className="text-gray-800">Working on updates functionality and automation</p>
            <p className="text-sm text-gray-500 mt-1">03-02-2025</p>
          </div>

          <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
            <p className="text-gray-800">Small medical derailment - fighting with nature</p>
            <p className="text-sm text-gray-500 mt-1">The whole month of February</p>
          </div>

          <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
            <p className="text-gray-800">My updates section below is still rather broken, so I'll put one here. While I'm not sure *exactly* what this is, I can say that as of today, it's an MMO. So. Welcome to that, I guess!</p>
            <p className="text-sm text-gray-500 mt-1">02-04-2025</p>
          </div>
        </div>
      </div>
      
      {isAdmin && connection && (
        <AdminControls connection={connection} />
      )}

      <div className="text-xs text-gray-500">
        Admin: {isAdmin ? 'Yes' : 'No'} | Connection: {connection ? 'Active' : 'None'}
      </div>
      
      <div className="mt-4 flex gap-2">
        <button
          onClick={() => {
            if (connection) {
              refreshAllUpdates(connection);
            }
          }}
          className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
        >
          Refresh Updates
        </button>
        
        <button
          onClick={() => {
            if (connection) {
              try {
                // Show debug info about the current connection 
                console.log('Connection debug info:');
                console.log('- Connected:', !!connection);
                console.log('- Admin count:', connection.db.admin.count());
                console.log('- Update log count:', connection.db.updateLog.count());
                
                // Log identity information
                if (connection.identity) {
                  console.log('- Identity:', connection.identity.toHexString());
                }
                
                // Trigger window.debugAdmin if it exists
                if (window.debugAdmin) {
                  console.log('Running debugAdmin:');
                  window.debugAdmin();
                }
                
                // Alert the user
                alert(`Debug info logged to console. ${connection.db.updateLog.count()} updates found.`);
              } catch (error) {
                console.error('Error in debug:', error);
              }
            }
          }}
          className="px-4 py-2 bg-blue-200 rounded hover:bg-blue-300"
        >
          Debug
        </button>
        <button
          onClick={debugDatabaseDirectly}
          className="px-4 py-2 bg-purple-200 rounded hover:bg-purple-300"
        >
          Debug DB Directly
        </button>
        <button
          onClick={debugDatabaseThoroughly}
          className="px-4 py-2 bg-red-200 rounded hover:bg-red-300"
        >
          Deep DB Debug
        </button>
        <button
          onClick={tryDirectSqlQuery}
          className="px-4 py-2 bg-yellow-200 rounded hover:bg-yellow-300"
        >
          Try SQL Query
        </button>
      </div>
    </div>
  );
};



export default StatusUpdates;